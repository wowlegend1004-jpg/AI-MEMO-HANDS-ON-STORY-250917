---
alwaysApply: true
---

# AI 메모장 프로젝트 규칙

## 목표 (GOAL)

-   깔끔하고 단순하며, 읽기 쉽고 모듈화된 코드를 작성한다.
-   요청한 것만 정확히 구현한다.
-   시니어 개발자처럼 깊게 고민한다.

---

## 개발 환경 (DEVELOPMENT ENVIRONMENT)

-   의존성 설치: `pnpm install`
-   개발 서버 실행: `pnpm dev`
-   Drizzle 관련 명령어:
    -   마이그레이션 파일 생성: `pnpm drizzle-kit generate`
    -   마이그레이션 적용: `pnpm drizzle-kit migrate`
    -   스키마 DB에 반영: `pnpm drizzle-kit push`
    -   DB 스키마 가져오기(introspect): `pnpm drizzle-kit pull`
    -   마이그레이션 충돌 검사: `pnpm drizzle-kit check`
    -   마이그레이션 스냅샷 업그레이드: `pnpm drizzle-kit up`
    -   Drizzle Studio 실행: `pnpm drizzle-kit studio`
-   테스트 실행: `pnpm test`

---

## UI 규칙 (UI COMPONENTS)

-   UI 컴포넌트는 **shadcn/ui** 사용
-   스타일링은 반드시 **Tailwind CSS** 사용

---

## 프레임워크 규칙 (FRAMEWORK)

-   라우팅은 반드시 **Next.js App Router**(`/app` 디렉토리) 사용
-   서버 로직은 **Server Actions**으로 구현

---

## 데이터베이스 & ORM (DATABASE & ORM)

-   데이터베이스: **Supabase Postgres**
-   모든 테이블은 `/drizzle/schema.ts`의 **Drizzle Schema**로 정의
-   마이그레이션은 **Drizzle Kit**으로 실행
-   권한 스코프는 **서버 코드에서 처리**

### 사용 원칙

-   **인증/세션**: Supabase Auth API 사용 (`signIn*`, `signOut*`, `getUser*`, `onAuthStateChange` 등)
-   **데이터 CRUD**: DrizzleORM으로 처리
-   **권한 제어**: 모든 Drizzle 쿼리는 사용자 스코프를 WHERE로 직접 강제

---

## 인증 & 보안 (AUTH & SECURITY)

-   **인증/세션은 Supabase Auth** 사용
-   **클라이언트에서 직접 외부 API 호출 금지** (예: Gemini API) → 서버사이드에서만 호출

---

## 호스팅 & 인프라 (HOSTING & INFRA)

-   배포는 **Vercel** 사용

---

## 주석 규칙 (COMMENTS)

-   모든 파일은 **4줄의 헤더 주석**으로 시작해야 한다:
    1. 코드베이스 내 정확한 파일 위치
    2. 이 파일이 무엇을 하는지 설명
    3. 이 파일이 왜 존재하는지 설명
    4. 관련된 2~4개 파일 목록
-   복잡하거나 직관적이지 않은 부분은 반드시 주석 추가
-   적은 주석보다 많은 주석이 낫다

---

## 파일 길이 (FILE LENGTH)

-   모든 파일은 **500 LOC 이하** 유지
-   파일은 모듈화되고 단일 목적을 가져야 한다

---

## UI 디자인 원칙 (UI DESIGN PRINCIPLES)

-   단순하고 깔끔하며 미니멀한 UI
-   Apple/Notion 수준의 직관적인 UX 지향

---

## 데이터베이스 변경 (DATABASE CHANGES)

-   AI는 DB 변경 권한 없음
-   모든 변경은 사용자 본인이 수행
-   DB 관련 제안은 가능하되 직접 실행 금지

---

## 출력 스타일 (OUTPUT STYLE)

-   짧고 명확한 문장
-   충분한 맥락 제공
-   가정과 결론을 명확히 설명
